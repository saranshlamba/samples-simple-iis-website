{
	"AWSTemplateFormatVersion": "2010-09-09",
    "Description": "CI/CD demo",
    "Parameters": {
		"KeyPairName": {
			"Description": "Name of an existing EC2 KeyPair",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"Default": "slamba_OR_kp_001",
			"ConstraintDescription": "can contain only alphanumeric characters, spaces, dashes and underscores."
		},
		"InstanceType": {
			"Description": "EC2 instance type",
			"Type": "String",
			"Default": "t2.micro",
			"AllowedValues": ["t1.micro",
			"t2.nano",
			"t2.micro",
			"t2.small",
			"t2.medium",
			"t2.large",
			"m1.small",
			"m1.medium",
			"m1.large",
			"m1.xlarge",
			"m2.xlarge",
			"m2.2xlarge",
			"m2.4xlarge",
			"m3.medium",
			"m3.large",
			"m3.xlarge",
			"m3.2xlarge",
			"m4.large",
			"m4.xlarge",
			"m4.2xlarge",
			"m4.4xlarge",
			"m4.10xlarge",
			"c1.medium",
			"c1.xlarge",
			"c3.large",
			"c3.xlarge",
			"c3.2xlarge",
			"c3.4xlarge",
			"c3.8xlarge",
			"c4.large",
			"c4.xlarge",
			"c4.2xlarge",
			"c4.4xlarge",
			"c4.8xlarge",
			"g2.2xlarge",
			"g2.8xlarge",
			"r3.large",
			"r3.xlarge",
			"r3.2xlarge",
			"r3.4xlarge",
			"r3.8xlarge",
			"i2.xlarge",
			"i2.2xlarge",
			"i2.4xlarge",
			"i2.8xlarge",
			"d2.xlarge",
			"d2.2xlarge",
			"d2.4xlarge",
			"d2.8xlarge",
			"hi1.4xlarge",
			"hs1.8xlarge",
			"cr1.8xlarge",
			"cc2.8xlarge",
			"cg1.4xlarge"],
			"ConstraintDescription": "must be a valid EC2 instance type."
		},
		"RemoteAdministrationLocation": {
			"Description": " The IP address range that can be used to RDP to the Windows EC2 instances or SSH into Linux",
			"Type": "String",
			"MinLength": "9",
			"MaxLength": "18",
			"Default": "73.254.183.71/32",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
		},		
		"TagOwner": {
			"Description": "System Owner, Primary Contact",
			"Type": "String",
			"Default": "Saransh",
			"AllowedPattern": "[a-zA-Z0-9_-]*"
		},
		"TagEnvironment": {
			"Description": "Environment",
			"Type": "String",
			"Default": "prod",
			"AllowedValues": ["dev",
			"test",
			"stage",
			"prod"]
		},
		"TagOperatingSystem": {
			"Description": "What OS is this Running",
			"Type": "String",
			"Default": "windows",
			"AllowedValues": ["windows",
			"linux"]
		},
		"TagOperatingHours": {
			"Description": "Operating Hours, Either Mon - Fri 6:00AM to 6:00PM (12x5)--OR-- Always Running (24x7)",
			"Type": "String",
			"Default": "24x7",
			"AllowedValues": ["12x5",
			"24x7"]
		},				
		"Email": {
			"Description": "Email for CloudWatch Alarms",
			"Type": "String",
			"MinLength" : "5",
            "MaxLength" : "100",
            "Default": "saranshlamba@gmail.com",
      		"ConstraintDescription" : "must be a valid e-mail address",
      		"AllowedPattern" : "^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$"	
		},			
		"CIDR": {
			"Description": "Eg, If you choose 20, VPC CIDR range -> 10.0.10.0/24",
			"Type": "String",
			"Default": "20",
			"AllowedValues": ["1",
			"2",
			"3",
			"4",
			"5",
			"6",
			"7",
			"8",
			"9",
			"10",
			"11",
			"12",
			"13",
			"14",
			"15",
			"16",
			"17",
			"18",
			"19",
			"20",
			"21",
			"22",
			"23",
			"24",
			"25",
			"26",
			"27",
			"28",
			"29",
			"30",
			"31",
			"32",
			"33",
			"34",
			"35",
			"36",
			"37",
			"38",
			"39",
			"40",
			"41",
			"42",
			"43",
			"44",
			"45",
			"46",
			"47",
			"48",
			"49",
			"50",
			"51",
			"52",
			"53",
			"54",
			"55",
			"56",
			"57",
			"58",
			"59",
			"60",
			"61",
			"62",
			"63",
			"64",
			"65",
			"66",
			"67",
			"68",
			"69",
			"70",
			"71",
			"72",
			"73",
			"74",
			"75",
			"76",
			"77",
			"78",
			"79",
			"80",
			"81",
			"82",
			"83",
			"84",
			"85",
			"86",
			"87",
			"88",
			"89",
			"90",
			"91",
			"92",
			"93",
			"94",
			"95",
			"96",
			"97",
			"98",
			"99",
			"100",
			"101",
			"102",
			"103",
			"104",
			"105",
			"106",
			"107",
			"108",
			"109",
			"110",
			"111",
			"112",
			"113",
			"114",
			"115",
			"116",
			"117",
			"118",
			"119",
			"120",
			"121",
			"122",
			"123",
			"124",
			"125",
			"126",
			"127",
			"128",
			"129",
			"130",
			"131",
			"132",
			"133",
			"134",
			"135",
			"136",
			"137",
			"138",
			"139",
			"140",
			"141",
			"142",
			"143",
			"144",
			"145",
			"146",
			"147",
			"148",
			"149",
			"150",
			"151",
			"152",
			"153",
			"154",
			"155",
			"156",
			"157",
			"158",
			"159",
			"160",
			"161",
			"162",
			"163",
			"164",
			"165",
			"166",
			"167",
			"168",
			"169",
			"170",
			"171",
			"172",
			"173",
			"174",
			"175",
			"176",
			"177",
			"178",
			"179",
			"180",
			"181",
			"182",
			"183",
			"184",
			"185",
			"186",
			"187",
			"188",
			"189",
			"190",
			"191",
			"192",
			"193",
			"194",
			"195",
			"196",
			"197",
			"198",
			"199",
			"200",
			"201",
			"202",
			"203",
			"204",
			"205",
			"206",
			"207",
			"208",
			"209",
			"210",
			"211",
			"212",
			"213",
			"214",
			"215",
			"216",
			"217",
			"218",
			"219",
			"220",
			"221",
			"222",
			"223",
			"224",
			"225",
			"226",
			"227",
			"228",
			"229",
			"230",
			"231",
			"232",
			"233",
			"234",
			"235",
			"236",
			"237",
			"238",
			"239",
			"240",
			"241",
			"242",
			"243",
			"244",
			"245",
			"246",
			"247",
			"248",
			"249",
			"250"]
		},
		"InstallerPath": {
			"Description": "Path to the S3 location that has installation bits.",
			"Type": "String",
			"Default": "tos3.zip"
		},
		"MinimumInstances": {
			"Description": "Enter minumim number of instances for the autoscale group",
			"Type": "String",
			"Default": "1"
		},
		"MaximumInstances": {
			"Description": "Enter maximum number of instances for the autoscale group",
			"Type": "String",
			"Default": "2"
		}	
	},	
	"Mappings": {
		"AMI": {			
			"us-west-2": {
				"WebServer": "ami-f318de8b"
			}
		}			
	},
    "Resources": {
        "VPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"CidrBlock": {
					"Fn::Join": ["",
					["10.0.",
					{
						"Ref": "CIDR"
					},
					".0/24"]]
				},
				"InstanceTenancy": "default",
				"EnableDnsSupport": "true",
				"EnableDnsHostnames": "true",
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": ["_",
						["vpc",
						{
							"Ref": "AWS::Region"
						},
						{
							"Ref": "TagEnvironment"
						},
						{
							"Ref": "AWS::StackName"
						}]]
					}
				},				
				{
					"Key": "owner",
					"Value": {
						"Ref": "TagOwner"
					}
				},
				{
					"Key": "environment",
					"Value": {
						"Ref": "TagEnvironment"
					}
				},
				{
					"Key": "stackname",
					"Value": {
						"Ref": "AWS::StackName"
					}
				}]
			}
		},
		"PublicSubnet1": {
			"DependsOn": ["VPC"],
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Fn::Join": ["",
					["10.0.",
					{
						"Ref": "CIDR"
					},
					".0/25"]]
				},
				"AvailabilityZone": {
					"Fn::Select": [0,
					{
						"Fn::GetAZs": ""
					}]
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": ["_",
						["publicsubnet1",
						{
							"Ref": "AWS::Region"
						},
						{
							"Ref": "TagEnvironment"
						},
						{
							"Ref": "AWS::StackName"
						}]]
					}
				},				
				{
					"Key": "owner",
					"Value": {
						"Ref": "TagOwner"
					}
				},
				{
					"Key": "environment",
					"Value": {
						"Ref": "TagEnvironment"
					}
				},
				{
					"Key": "stackname",
					"Value": {
						"Ref": "AWS::StackName"
					}
				}]
			}
        },
        "PublicSubnet2": {
			"DependsOn": ["VPC"],
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Fn::Join": ["",
					["10.0.",
					{
						"Ref": "CIDR"
					},
					".128/25"]]
				},
				"AvailabilityZone": {
					"Fn::Select": [1,
					{
						"Fn::GetAZs": ""
					}]
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": ["_",
						["publicsubnet2",
						{
							"Ref": "AWS::Region"
						},
						{
							"Ref": "TagEnvironment"
						},
						{
							"Ref": "AWS::StackName"
						}]]
					}
				},
				{
					"Key": "owner",
					"Value": {
						"Ref": "TagOwner"
					}
				},
				{
					"Key": "environment",
					"Value": {
						"Ref": "TagEnvironment"
					}
				},
				{
					"Key": "stackname",
					"Value": {
						"Ref": "AWS::StackName"
					}
				}]
			}
		},		
		"InternetGateway": {
			"Type": "AWS::EC2::InternetGateway",
			"DependsOn": ["VPC"],
			"Properties": {
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": ["_",
						["ig",
						{
							"Ref": "AWS::Region"
						},
						{
							"Ref": "TagEnvironment"
						},
						{
							"Ref": "AWS::StackName"
						}]]
					}
				},
				{
					"Key": "owner",
					"Value": {
						"Ref": "TagOwner"
					}
				},
				{
					"Key": "environment",
					"Value": {
						"Ref": "TagEnvironment"
					}
				},
				{
					"Key": "stackname",
					"Value": {
						"Ref": "AWS::StackName"
					}
				}]
			}
		},
		"GatewayToInternet": {
			"DependsOn": ["VPC",
			"InternetGateway"],
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"InternetGatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"PublicRouteTable": {
			"DependsOn": ["VPC",
			"InternetGateway"],
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": ["_",
						["rt_public",
						{
							"Ref": "AWS::Region"
						},
						{
							"Ref": "TagEnvironment"
						},
						{
							"Ref": "AWS::StackName"
						}]]
					}
				},
				{
					"Key": "owner",
					"Value": {
						"Ref": "TagOwner"
					}
				},
				{
					"Key": "environment",
					"Value": {
						"Ref": "TagEnvironment"
					}
				},
				{
					"Key": "stackname",
					"Value": {
						"Ref": "AWS::StackName"
					}
				}]
			}
		},
		"PublicRoute": {
			"DependsOn": ["PublicRouteTable",
			"InternetGateway",
			"VPC"],
			"Type": "AWS::EC2::Route",
			"Properties": {
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"PublicSubnet1RouteTableAssociation": {
			"DependsOn": ["PublicSubnet1",
			"PublicRouteTable"],
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet1"
				},
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				}
			}
        },
        "PublicSubnet2RouteTableAssociation": {
			"DependsOn": ["PublicSubnet2",
			"PublicRouteTable"],
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet2"
				},
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				}
			}
		},
        "SnSTopic": {
			"Type" : "AWS::SNS::Topic",
			"Properties" : {
			"DisplayName" : "SNS Topic for Alarms",
			"Subscription" : [{"Endpoint": {"Ref":"Email"}, "Protocol": "email"}], 
			"TopicName" : {"Fn::Join": ["_",["SnS",{"Ref": "AWS::StackName"},{"Ref": "AWS::Region"}]]}
			}
        },
        "WebInstanceSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"DependsOn": ["VPC"],
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"GroupDescription": "WebInstanceSecurityGroup",
				"SecurityGroupIngress": [{
					"IpProtocol": "icmp",
					"FromPort": "-1",
					"ToPort": "-1",
					"CidrIp": "0.0.0.0/0"
				},
				{
					"IpProtocol": "-1",
					"CidrIp": {
						"Ref": "RemoteAdministrationLocation"
					}
				},				
				{
					"IpProtocol": "tcp",
					"FromPort": "443",
					"ToPort": "443",
					"CidrIp": "0.0.0.0/0"
                },
                {
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp": "0.0.0.0/0"
				}
			],
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": ["_",
						["sg_web",
						{
							"Ref": "AWS::Region"
						},
						{
							"Ref": "TagEnvironment"
						},
						{
							"Ref": "AWS::StackName"
						}]]
					}
				},
				{
					"Key": "owner",
					"Value": {
						"Ref": "TagOwner"
					}
				},
				{
					"Key": "environment",
					"Value": {
						"Ref": "TagEnvironment"
					}
				},
				{
					"Key": "os",
					"Value": {
						"Ref": "TagOperatingSystem"
					}
				},
				{
					"Key": "operating hours",
					"Value": {
						"Ref": "TagOperatingHours"
					}
				},
				{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackId"
					}
				}]
			}
        },
        "WebSecurityGroupIngressWebInstance": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"DependsOn": ["WebInstanceSecurityGroup"],
			"Properties": {
				"GroupId": {
					"Ref": "WebInstanceSecurityGroup"
				},
				"IpProtocol": "-1",
				"SourceSecurityGroupId": {
					"Ref": "WebInstanceSecurityGroup"
				}
			}
        },
        "PublicLBSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"GroupDescription": "PublicLBSecurityGroup",
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "443",
					"ToPort": "443",
					"CidrIp": "0.0.0.0/0"
				},
				{
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp": "0.0.0.0/0"
				}],
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": ["_",
						["sg_public_lb",
						{
							"Ref": "AWS::Region"
						},
						{
							"Ref": "TagEnvironment"
						},
						{
							"Ref": "AWS::StackName"
						}]]
					}
				},
				{
					"Key": "owner",
					"Value": {
						"Ref": "TagOwner"
					}
				},
				{
					"Key": "environment",
					"Value": {
						"Ref": "TagEnvironment"
					}
				},
				{
					"Key": "os",
					"Value": {
						"Ref": "TagOperatingSystem"
					}
				},
				{
					"Key": "operating hours",
					"Value": {
						"Ref": "TagOperatingHours"
					}
				},
				{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackId"
					}
				}]
			}
		},
        "InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": ["FullAccess"]
			}
        },
        "WebServerGroup": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"DependsOn": ["VPC",
			"PublicSubnet1","PublicSubnet2",
			"WebServerLaunchConfig"],
			"Properties": {
				"VPCZoneIdentifier": [{
					"Ref": "PublicSubnet1"
				},
				{
					"Ref": "PublicSubnet2"
				}],
				"LaunchConfigurationName": {
					"Ref": "WebServerLaunchConfig"
				},
				"LoadBalancerNames": [{
					"Ref": "PublicLBWebServer"
				}],
				"MinSize": {
					"Ref": "MinimumInstances"
				},
				"MaxSize": {
					"Ref": "MaximumInstances"
				},
				"TerminationPolicies": ["OldestInstance"],
				"Cooldown": "1800",
				"HealthCheckGracePeriod": "1800",
				"HealthCheckType": "ELB",
				"NotificationConfiguration": {
					"TopicARN": {"Ref": "SnSTopic"},
					"NotificationTypes": ["autoscaling:EC2_INSTANCE_LAUNCH",
					"autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
					"autoscaling:EC2_INSTANCE_TERMINATE",
					"autoscaling:EC2_INSTANCE_TERMINATE_ERROR"]
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": ["_",
						["ec2",
						{
							"Ref": "AWS::Region"
						},
						{
							"Ref": "TagEnvironment"
						},
						"management",
						{
							"Ref": "AWS::StackName"
						}]]
					},
					"PropagateAtLaunch": "true"
				},
				{
					"Key": "owner",
					"Value": {
						"Ref": "TagOwner"
					},
					"PropagateAtLaunch": "true"
				},
				{
					"Key": "environment",
					"Value": {
						"Ref": "TagEnvironment"
					},
					"PropagateAtLaunch": "true"
				},
				{
					"Key": "stackname",
					"Value": {
						"Ref": "AWS::StackName"
					},
					"PropagateAtLaunch": "true"
				},
				{
					"Key": "operating hours",
					"Value": {
						"Ref": "TagOperatingHours"
					},
					"PropagateAtLaunch": "true"
				},
				{
					"Key": "os",
					"Value": {
						"Ref": "TagOperatingSystem"
					},
					"PropagateAtLaunch": "true"
				},
				{
					"Key": "codedeploy role",
					"Value": {
						"Fn::Join": ["-",
						["web",
						{
							"Ref": "AWS::StackName"
						}]]
					},
					"PropagateAtLaunch": "true"
				}]
			},
			"UpdatePolicy": {
				"AutoScalingRollingUpdate": {
					"MinInstancesInService": {
						"Ref": "MinimumInstances"
					},
					"MaxBatchSize": "1",
					"MinSuccessfulInstancesPercent": "33",
					"WaitOnResourceSignals": "true",
					"PauseTime": "PT30M"
				}
			},
			"CreationPolicy": {
				"ResourceSignal": {
					"Count": "1",
					"Timeout": "PT30M"
				}
			}
		},
		"WebServerLaunchConfig": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"DependsOn": ["VPC",
			"WebInstanceSecurityGroup"],
			"Metadata": {
				"AWS::CloudFormation::Authentication": {
					"S3AccessCreds": {
						"type": "S3",
						"roleName": "FullAccess",
						"buckets": ["s3demo2017"]
					}
				},
				"AWS::CloudFormation::Init": {
					"configSets": {
						"Webserver": ["Webserver"],
						"WebserverReboot": ["WebserverReboot"]
					},
					"Webserver": {
						"files": {							
							"c:\\Program Files\\Amazon\\Ec2ConfigService\\Settings\\AWS.EC2.Windows.CloudWatch.json": {
								"content": {
									"EngineConfiguration": {
										"PollInterval": "00:01:00",
										"Components": [{
											"Id": "PerformanceCounter",
											"FullName": "AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch",
											"Parameters": {
												"CategoryName": "Memory",
												"CounterName": "Available MBytes",
												"InstanceName": "",
												"MetricName": "Memory",
												"Unit": "Megabytes",
												"DimensionName": "WebServer",
												"DimensionValue": "1"
											}
										},										
										{
											"FullName": "AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch",
											"Id": "IISLogs",
											"Parameters": {
												"LogDirectoryPath": "C:\\inetpub\\logs\\LogFiles\\W3SVC1",
												"TimestampFormat": "yyyy-MM-dd HH:mm:ss",
												"Encoding": "UTF-8",
												"Filter": "",
												"LineCount": "3"
											}
										},
										{
											"Id": "CloudWatchLogs",
											"FullName": "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",
											"Parameters": {
												"AccessKey": "",
												"SecretKey": "",
												"Region": {
													"Ref": "AWS::Region"
												},
												"LogGroup": {
													"Ref": "AWS::StackName"
												},
												"LogStream": "WebServer-IIS"
											}
										},										
										{
											"Id": "CloudWatch",
											"FullName": "AWS.EC2.Windows.CloudWatch.CloudWatch.CloudWatchOutputComponent,AWS.EC2.Windows.CloudWatch",
											"Parameters": {
												"AccessKey": "",
												"SecretKey": "",
												"Region": {
													"Ref": "AWS::Region"
												},
												"NameSpace": {
													"Ref": "AWS::StackName"
												}
											}
										}],
										"Flows": {
											"Flows": ["PerformanceCounter,CloudWatch",
											"IISLogs,CloudWatchLogs"]
										}
									}
								}
							}
						},						
						"services": {
							"windows": {
								"codedeployagent": {
									"enabled" : "true",
									"ensureRunning" : "true"
								}
							}	
						}
					},
					"WebserverReboot": {
						"commands": {
							"a": {
                                "command": {
                                    "Fn::Join": ["",["powershell.exe -Command Restart-Computer -Force"]]
                                },
                                "waitAfterCompletion": "forever"
                            }
						}
					}
				}
			},
			"Properties": {
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"KeyName": {
					"Ref": "KeyPairName"
				},
				"ImageId": {
					"Fn::FindInMap": ["AMI",
					{
						"Ref": "AWS::Region"
					},
					"WebServer"]
                },
                "AssociatePublicIpAddress": "true",
				"SecurityGroups": [{
					"Ref": "WebInstanceSecurityGroup"
				}],
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"BlockDeviceMappings": [{
					"DeviceName": "/dev/sda1",
					"Ebs": {
						"VolumeSize": "80"
					}
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["",[
						"<powershell>\n",
						"Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Force; \n",
						"New-Item -Path c:\\temp -ItemType directory; \n",
                        "$int=Get-NetIPInterface | where {$_.InterfaceAlias -like \"eth*\" -and $_.AddressFamily -eq \"ipv4\"} | select InterfaceAlias; \n",
						"Set-DnsClientServerAddress -InterfaceAlias $int.InterfaceAlias -ResetServerAddresses; \n",
                        "Import-Module AWSPowerShell; \n",
                        "Read-S3Object -BucketName aws-codedeploy-us-west-2 -Key latest/codedeploy-agent.msi -File c:\\temp\\codedeploy-agent.msi; \n",
                        "c:\\temp\\codedeploy-agent.msi /quiet /l c:\\temp\\host-agent-install-log.txt; \n",
                        "start-sleep -seconds 30; \n",
                        "restart-service codedeployagent -force; \n",
                        "cfn-init.exe -v -c Webserver -s ",{"Ref": "AWS::StackId"}," -r WebServerLaunchConfig"," --region ",{"Ref": "AWS::Region"},";\n",
                        "Add-Type -assembly \"system.io.compression.filesystem\"; \n",
                        "Add-WindowsFeature FileAndStorage-Services, File-Services, FS-FileServer, Storage-Services, Web-Server, Web-Mgmt-Tools, Web-Mgmt-Console, Web-Mgmt-Compat, Web-Metabase, Web-Lgcy-Mgmt-Console, Web-Lgcy-Scripting, Web-WMI, Web-Scripting-Tools, Web-Mgmt-Service, Web-WebServer, Web-App-Dev, Web-Net-Ext, Web-Net-Ext45, Web-AppInit, Web-ASP, Web-Asp-Net, Web-Asp-Net45, Web-CGI, Web-ISAPI-Ext, Web-ISAPI-Filter, Web-Includes, Web-Common-Http, Web-Default-Doc, Web-Dir-Browsing, Web-Http-Errors, Web-Static-Content, Web-Http-Redirect, Web-DAV-Publishing, Web-Health, Web-Http-Logging, Web-Log-Libraries, Web-Http-Tracing, Web-Performance, Web-Stat-Compression, Web-Security, Web-Basic-Auth, Web-Filtering, Web-Windows-Auth, NET-Framework-Features, NET-Framework-Core, NET-HTTP-Activation, NET-Non-HTTP-Activ, NET-Framework-45-Features, NET-Framework-45-Core, NET-Framework-45-ASPNET, NET-WCF-Services45, NET-WCF-HTTP-Activation45, NET-WCF-TCP-Activation45, NET-WCF-TCP-PortSharing45, WAS, WAS-NET-Environment, WAS-Config-APIs, WAS-Process-Model; \n",
                        "start-sleep -seconds 30; \n",
                        "stop-service wuauserv -force; \n",
                        "cfn-signal.exe -e 0 --stack ",{"Ref": "AWS::StackId"}," --resource WebServerGroup --region ",{"Ref": "AWS::Region"},"; \n",
						"#cfn-init.exe -v -c WebserverReboot -s ",{"Ref": "AWS::StackId"}," -r WebServerLaunchConfig"," --region ",{"Ref": "AWS::Region"},";\n",
						"</powershell>\n"
						]]
					}
				}
			}
		},
		"WebServerScaleUpPolicy": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"DependsOn": ["VPC",
			"WebServerGroup"],
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "WebServerGroup"
				},
				"Cooldown": "1800",
				"ScalingAdjustment": "1"
			}
		},
		"WebServerScaleDownPolicy": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"DependsOn": ["VPC",
			"WebServerGroup"],
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "WebServerGroup"
				},
				"Cooldown": "1800",
				"ScalingAdjustment": "-1"
			}
		},
		"CodeDeployApplication": {			
			"Type" : "AWS::CodeDeploy::Application",
			"Properties" : {
				"ApplicationName" : {"Fn::Join": ["_",[{"Ref": "AWS::StackName"},"Application"]]}
			}
		},
		"CodeDeployDeploymentConfig": {
			"Type" : "AWS::CodeDeploy::DeploymentConfig",
			"Properties" : {
				"DeploymentConfigName" : {"Fn::Join": ["_",[{"Ref": "AWS::StackName"},"DeploymentConfig"]]},
				"MinimumHealthyHosts" : {
					"Type" : "HOST_COUNT",
					"Value" : "0"
				}
			}
		},
		"CodeDeployDeploymentGroup": {
			"Type" : "AWS::CodeDeploy::DeploymentGroup",
			"Properties" : {
				"ApplicationName": {"Ref": "CodeDeployApplication"},
				"AutoScalingGroups": [{"Ref": "WebServerGroup"}],
				"Deployment": {
					"IgnoreApplicationStopFailures": "true",
					"Revision": {
						"RevisionType" : "S3",
						"S3Location" : {
							"Bucket" : "s3demo2017",
							"BundleType" : "zip",
							"Key" : {"Ref": "InstallerPath"}
						}
					}
				},
				"DeploymentConfigName": {"Ref": "CodeDeployDeploymentConfig"},
				"Ec2TagFilters": [{
					"Type" : "KEY_AND_VALUE",
					"Key": "codedeploy role",
					"Value": {"Fn::Join": ["-",["web",{"Ref": "AWS::StackName"}]]}
				}],
				"ServiceRoleArn": "arn:aws:iam::889779746672:role/FullAccess"
			}
        },
        "PublicLBWebServer": {
			"Type": "AWS::ElasticLoadBalancing::LoadBalancer",
			"DependsOn": ["PublicLBSecurityGroup",
			"PublicSubnet1",
			"PublicSubnet2",
			"InternetGateway",
			"GatewayToInternet"],
			"Properties": {
				"CrossZone": "true",
				"Listeners": [
				{
					"LoadBalancerPort": "80",
					"InstancePort": "80",
					"InstanceProtocol": "TCP",
					"Protocol": "TCP"
				}],
				"HealthCheck": {
					"Target": "HTTP:80/",
					"HealthyThreshold": "3",
					"UnhealthyThreshold": "10",
					"Interval": "30",
					"Timeout": "5"
				},
				"SecurityGroups": [{
					"Ref": "PublicLBSecurityGroup"
				}],
				"Subnets": [{
					"Ref": "PublicSubnet1"
				},
				{
					"Ref": "PublicSubnet2"
				}],
				"Scheme": "internet-facing",				
				"ConnectionSettings": {
					"IdleTimeout": "900"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": ["_",
						["lb",
						{
							"Ref": "AWS::Region"
						},
						{
							"Ref": "TagEnvironment"
						},
						"publiclb",
						{
							"Ref": "AWS::StackName"
						}]]
					}
				},				
				{
					"Key": "owner",
					"Value": {
						"Ref": "TagOwner"
					}
				},
				{
					"Key": "environment",
					"Value": {
						"Ref": "TagEnvironment"
					}
				},
				{
					"Key": "stackname",
					"Value": {
						"Ref": "AWS::StackName"
					}
				}]
			}
        },
        "CPUAlarmHighWebServer": {
			"Type": "AWS::CloudWatch::Alarm",
			"DependsOn": ["WebServerScaleUpPolicy",
			"WebServerGroup"],
			"Properties": {
				"AlarmDescription": "Scale-up Web Server if CPU > 85% for 10 minutes",
				"MetricName": "CPUUtilization",
				"Namespace": "AWS/EC2",
				"Statistic": "Average",
				"Period": "300",
				"EvaluationPeriods": "2",
				"Threshold": "85",
				"AlarmActions": [{
					"Ref": "WebServerScaleUpPolicy"
				}],
				"Dimensions": [{
					"Name": "AutoScalingGroupName",
					"Value": {
						"Ref": "WebServerGroup"
					}
				}],
				"ComparisonOperator": "GreaterThanThreshold"
			}
		},
		"MemoryAlarmLowWebServer": {
			"Type": "AWS::CloudWatch::Alarm",
			"DependsOn": ["WebServerScaleUpPolicy",
			"WebServerGroup"],
			"Properties": {
				"AlarmDescription": "Scale-up Web Server if Available Memory < 1024M for 10 minutes",
				"MetricName": "Memory",
				"Namespace": {
					"Ref": "AWS::StackName"
				},
				"Statistic": "Average",
				"Period": "300",
				"EvaluationPeriods": "2",
				"Threshold": "1024",
				"Unit": "Megabytes",
				"AlarmActions": [{
					"Ref": "WebServerScaleUpPolicy"
				}],
				"Dimensions": [{
					"Name": "WebServer",
					"Value": "1"
				}],
				"ComparisonOperator": "LessThanThreshold"
			}
        }
    },
    "Outputs": {
        "LoadBalancerFQDN": {
            "Description": "Public Load Balancer CNAME",
            "Value": {"Fn::GetAtt": ["PublicLBWebServer","CanonicalHostedZoneName"]}
        }
    }    
}